Programming Historian SPARQL Notes

This lesson explains why many cultural institutions are adopting graph databases, and how researchers can access these data through the query language called SPARQL. APIs not ideal for cultural heritage data because they are structured to work for a predeterimined set of queries. RDF databases are well-suited to expressing complex relationships between many entities, like people, places, events and concepts tied to individual objects. Referred to as "graph databases." 

Because RDF databases support the use of URLs, they can be made available online and linked to other databases, hence the term "Linked Open Data." SPARQL is the language used to query these databases. Language does not presuppose the perspectives that users will bring to the data. We will learn how to query the British Museum Linked Open Data collection.

RDF represents information in a series of three-part "statements" that comprise a subject, predicate, and an object, e.g.: "<The Nightwatch> <was created by> <Rembrant van Rijn> . " *Note the period at the end. 
SPARQL lets us translate heavily interlinked, graph data into normalized tabular data with rows and columns that can be opened in Excel or imported into a visualization suite such as plot.ly or Palladio. Think of SPARQL query as a Mad Lib. Example:

SELECT ?painting
WHERE {
	?painting <has medium> <oil on canvas> .
}

?painting stands in for the node (or nodes) that the database will return. Will search for all values of ?painting that properly completes RDF statement. What makes SPARQL and RDF powerful is the ability to create complex queries that reference many variables at a time. 

RDFs primarily stored as URIs (Uniform Resource Indentifiers) that separate conceptual entities from their plain-English (or other language) labels.  In real RDF, original statement "<The Nightwatch> <was created by> <Rembrandt van Rijn>" would look more like:

"<http://data.rijksmuseum.nl/item/8909812347> <http://purl.org/dc/terms/creator>  <http://dbpedia.org/resource/Rembrandt>."

Even the predicate in that statement has its own literal label. 

<http://data.rijksmuseum.nl/item/8909812347> <http://purl.org/dc/terms/title> "The Nightwatch" .

<http://purl.org/dc/terms/creator> <http://www.w3.org/1999/02/22-rdf-syntax-ns#label> "was created by" .

<http://dbpedia.org/resource/Rembrandt> <http://xmlns.com/foaf/0.1/name> "Rembrandt van Rijn" .

The predicates' domains (w3.org, purl.org, xmlns.com) are some of the many providers of ontologies that help standardize the way we describe relationships between bits of info like "title" "label" "creator" or "name".  We will use prefixes, shortcuts that allow us to skip typing our entire long URIs. example: instead of "http://purl.org/dc/terms/title" we can use "dct:title" dct stands in for http://purl.org/dc/terms/ 

Many live databases, like the British Museum, already define these prefixes for us so we won't have to explicitly state them in our queries. But now we can recognize them. 

ALL THE STATEMENTS FOR ONE OBJECT : Start first query using the British Museum SPARQL endpoint. A SPARQL endpoint is a web address that accepts SPARQL queries and returns results. 

SELECT ?p ?o
WHERE {
	<http://collection.britishmuseum.org/id/object/PPA82633> ?p ?o .
}

By calling SELECT ?p ?o we're asking the database to return the values of ?p and ?o as described in the WHERE {} command. Query returns every statement for which our example artwork is the subject.  Lets's find out how they store the object type information: look for the predicate <bmo:PX_object_type> and click on link for thes:x8577 to navigate  to the node describing the particular object type "print"

COMPLEX QUERIES: To find other ojects of the same type with the preferred label "print," we can call this query:

SELECT ?object
WHERE {
	
	# Search for all values of ?object that have a given "object type"
	?object bmo:PX_object_type ?object_type .
	
	# That object type should have the label "print"
	?object_type skos:prefLabel "print" .
}

Print is a literal so enclose it in quotations. Will only return exact matches. ?object_type is not present in SELECT command so it will not show up in the results table. It is still needed to connect the dots between ?object to the label "print"

FILTER: Often we want to match literal values that fall within a certain range, such as dates. To find URIs fo all the prints in the BM between 1580-1600, we'll need to first figure out where the database stores dates in relationship to the object node, and then add references to those dates in our query. 

# Return object links and creation date
SELECT ?object ?date
WHERE {

  # We'll use our previous command to search only for
  # objects of type "print"
  ?object bmo:PX_object_type ?object_type .
  ?object_type skos:prefLabel "print" .

  # We need to link though several nodes to find the
  # creation date associated with an object
  ?object ecrm:P108i_was_produced_by ?production .
  ?production ecrm:P9_consists_of ?date_node .
  ?date_node ecrm:P4_has_time-span ?timespan .
  ?timespan ecrm:P82a_begin_of_the_begin ?date .

  # As you can see, we need to connect quite a few dots
  # to get to the date node! Now that we have it, we can
  # filter our results. Because we are filtering by date,
  # we must attach the tag ^^xsd:date after our date strings.
  # This tag tells the database to interpret the string
  # "1580-01-01" as the date 1 January 1580.

  FILTER(?date >= "1580-01-01"^^xsd:date &&
         ?date <= "1600-01-01"^^xsd:date)
}

AGGREGATION: So far we have only used the SELECT commnad to return a table of ojects. SPARQL allows us to do more like grouping, counting, and sorting. If we want to keep looking at objects from between 1580-1600, but we want to udnerstand how many objects of each type the BM has, we use COUNT to tally our results, instead of the type "print." 

SELECT ?type (COUNT(?type) as ?n)
WHERE {
  # We still need to indicate the ?object_type variable,
  # however we will not require it to match "print" this time

  ?object bmo:PX_object_type ?object_type .
  ?object_type skos:prefLabel ?type .

  # Once again, we will also filter by date
  ?object ecrm:P108i_was_produced_by ?production .
  ?production ecrm:P9_consists_of ?date_node .
  ?date_node ecrm:P4_has_time-span ?timespan .
  ?timespan ecrm:P82a_begin_of_the_begin ?date .
  FILTER(?date >= "1580-01-01"^^xsd:date &&
         ?date <= "1600-01-01"^^xsd:date)
}
# The GROUP BY command designates the variable to tally by,
# and the ORDER BY DESC() command sorts the results by
# descending number.
GROUP BY ?type
ORDER BY DESC(?n)

LINKING MULTIPLE SPARQL ENDPOINTS

We have constructed queries that look for patterns in one dataset alone. Many endpoints (including BM) do not yet reference outside authorities. One that does is Eruopeana's. They have created links between the objects in their database and records about individuals in DBPedia and VIAF, places in GeoNames, and concepts in the Getty Art & Architecture thesaurus. SPARQL allows you to insert SERVICE statements that instruct the database to 'phone a friend' and run a portion of the query on an outside dataset. Using Europeana endpoint. 

PREFIX edm:    <http://www.europeana.eu/schemas/edm/>
PREFIX rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbo:    <http://dbpedia.org/ontology/>
PREFIX dbr:    <http://dbpedia.org/resource/>
PREFIX rdaGr2: <http://rdvocab.info/ElementsGr2/>

# Find all ?object related by some ?property to an ?agent born in a
# ?dutch_city
SELECT ?object ?property ?agent ?dutch_city
WHERE {
    ?proxy ?property ?agent .
    ?proxy ore:proxyFor ?object .

    ?agent rdf:type edm:Agent .
    ?agent rdaGr2:placeOfBirth ?dutch_city .

    # ?dutch_city is defined by having "Netherlands" as its broader
    # country in DBpedia. The SERVICE statement asks
    # http://dbpdeia.org/sparql which cities have the country
    # "Netherlands". The answers to that sub-query will then be
    # used to finish off our original query about objects in the
    # Europeana database

    SERVICE <http://dbpedia.org/sparql> {
        ?dutch_city dbo:country dbr:Netherlands .
   }
}
# This query can potentially return a lot of objects, so let's
# just request the first 100 in order to speed up the search
LIMIT 100

An interlinked query means that we can ask Europeana questions about its objects that rely on information about geography that Europeana does not need to store and maintain itself. 

EXPORT RESULTS TO CSV: In the top right corner of the results page for the BM endpoint, you will find links for both JSOn and XML downloads. Others may also offer the option for a CSV/TSV (like excel) download, however this is not always available. Contains not only values from the SELECT statement but also the metadata. 
